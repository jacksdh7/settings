[REQ-purpose]
text = '''
The purpose of this project is to provide a generic Application settings library
that can be reused by multiple projects.

Elixir generally uses the `app_env` approach to configuring applications, via
`config.exs` and various environment versions.

General requirements:

- there must be a single place to find all possible settings for an applications
- there must be a simple way to get all of the current settings for an application
- a single setting must be able to have different values based on node()
- the backend to store the settings must be configurable by the end-user
- Settings may be stored in multiple backends in the same app

Possible requirements:
- a single setting must be able to have different values based on Mix.env()

Parts:

- [[REQ-User_Stories]] for uses
- [[SPC-data_model]] for data modelling.
- [[SPC-API]] for the API design.
- [[SPC-Backend]] for the Backend behavior design.
- [[SPC-Config]] for configuration design.
'''


[REQ-User_Stories]
partof = 'REQ-purpose'
text = '''

1. Chris is developing a feature for his app, and creates a setting with a
default value of `:foo`. As he develops this feature, he realizes that the
default value should have been `:bar`. To update the default value, he only has
to change one file.

2. Chris has finished developing his application, and setting_1 has the default
value of `:bar`. Now that he is deploying the application, he needs to set the
value of the setting to `:baz` for this deployment only.

3. Chris is part of the 10%, and wants to store some of his settings in
Postgres, and some in an in-memory store.  He sets up each of his settings to
use the appropriate backend.

4. Chris is now part of the 2%, and has a setting which is stored in two
different backends.  He doesn't mind a bit of extra work to get it from
different places because he knows what he wants.

5. We have had a setting for a while, and have a custom :global value set. Now,
we change the default specified in `create`... What should happen to the :global
value?

6. Drew wants a macro that sets the application locally. Should it set the
backend locally too?

'''

[SPC-data_model]
partof = 'REQ-purpose'
text = '''
A setting is founded on the concept of an `{backend, app, key, scope, value}` tuple.

The `backend` is the persistence layer for the setting.
The `app` specifies which application the setting belongs to.
The `key` is the name of the setting.

The `scope` determines the extent of the value. Two literal scopes are reserved:
`:__default`, and `:__global`. Additionally, the computed scope `:__node` will
be evaluated and replaced with the result of `node()`

The `value` should be obvious.

`backend` will be a module that implements the `Settings.Backend` behaviour.
`app` should be an atom.
`key` may be any term, though atoms and tuples will be most common.
`scope` may be any term.
`value` may be any term.

While the API allows access to all values for a setting, in typical application
use, the abbreviated forms will first use scope matching the current node,
followed by the :global scope, followed by the :default scope.

'''



[SPC-API]
partof = 'REQ-purpose'
text = '''

## API calls:

### `set_defaults/1`

`set_defaults(opts)` accepts a keword list with the following valid keys:

- `:backend` specify a default backend for all settings.
- `:app`     specify a default app for all settings.

This call's effect is scoped to the current Elixir node, and provides default
values when the option is not specified in `get/2` or `set/3`. The function
returns the defaults after the change is made.

### `get_defaults/0`

This call returns the current default app and backend. The initial values are
`:__none`.

#### Examples:
```elixir
iex> Settings.get_defaults
[app: :__none, backend: :__none]
...> Settings.set_defaults(app: :myapp)
[app: :myapp, backend: :__none]
...> Settings.set_defaults(backend: MyBackend)
[app: :myapp, backend: MyBackend]
```

### `create/3`

`create(name, default_value, opts)` sets up a new setting, providing the name
and default value. If `:backend` or `:app` are not specified in `opts`, they
will default to those set using `set_defaults/1`

When a persistent backend is used, `create` will update the default value for the
setting, and will not impact overriding scopes already set.

This function returns the setting name.

#### Examples:

```elixir
iex> Settings.set_defaults(app: :myapp, backend: MyBackend)
[app: :myapp, backend: MyBackend]
...> Settings.create(:setting_1, "value")
:setting_1
...> Settings.create(:setting_2, "value2", backend: OtherBackend)
:setting_2
...> Settings.get(:setting_2) # <= retrieves from OtherBackend
"value2"
```

### `get/2`

`get(name, opts) retrieves a value for a setting. Valid opts:

- `:app`      The application which this setting is part of. Default is
              `:__default`, which is replaced with `get_defaults[:app]`
- `:scope`    The scope of the setting. Default: `:__global`
- `:backend`  The backend to retrieve from. Default is :__default, which is
              replaced with `get_defaults[:backend]`

`get` observes the following semantics: Settings first searches for a value
matching `{app, name, scope}` using the scope passed in to `opts`. If nothing is
found, Settings then searches for `{app, name, :__global}`, and finally for
`{app, name, :__default}`


### `set/3`

`set(name, value, opts)` sets a value for a setting. Valid opts:

- `:app`      The application which this setting is part of. Default is
              `:__default`, which is replaced with `get_defaults[:app]`
- `:scope`    The scope to set. Default: `:__global`
- `:backend`  The backend to assign to. Default is :__default, which is
              replaced with `get_defaults[:backend]`

This function returns the value that was set.

### `all/1`

`all(opts)` retrieves all settings matching the options passed in. Valid opts:

- `:app`      Limit the query to just this application's settings.
- `:backend`  Retrieve from this backend

##### START AGAIN HERE

```elixir
set_defaults(backend: default_backend, app: default_app)

@create_default_opts [app: :__default, backend: :__default]
create(name, default_value, opts)  # :ok

@type app atom
@type key any
@type scope any
@type value any
@type setting {app, key, [{scope, value}]}

@default_get_opts [app: :__default, scope: :__node, backend: :__default]
get(name, opts)         # => value | {:error, :bad_key}

@default_set_opts [app: :__default, scope: :__global, backend: :__default]
set(name, value, opts)  # => :ok | {:error, :bad_key}

@default_all_opts [app: :__default, backend: :__default]
all(opts)               # => [setting]

# deletes the whole thing:
@default_delete_opts [app: :__default, backend: :__default]
delete(name, opts)      # => :ok | {:error, :bad_key}

# just removes one scope.  scope: :__default won't work here.
# scope is a mandatory parameter, but putting it in opts because that's where it
# is for the rest of the API
# should clear allow deleting :__default scope?
@default_clear_opts [app: :__default, scope: :__all_but_default, :backend: :__default]
clear(name, opts)       # => :ok | {:error, :bad_key}


# clears a backend of all settings
delete_all(backend) # => :ok
```
## Examples

Settings.set_defaults(backend: %PgBackend{}, app: :my_app)

# adds {:my_app, :first_setting, :__default, "default_value"} to the PgBackend
Settings.create(:first_setting, "default_value")

# adds {:my_app, :first_setting, :__global, "custom"} to the PgBackend
Settings.set(:first_setting, "custom")

Settings.get(:first_setting) # => "custom"
Settings.get(:first_setting, scope: :__default) # => "default_value"

Settings.all() # => [{:myapp, :first_setting, [__default: "default_value", __global: "custom"]}]

'''

[SPC-Macros]
partof = 'REQ-purpose'
text = '''

A nice syntax in Umbrella apps is for a module to locally define default
application (or backend, if that makes sense).  Something like:

```elixir
defmodule MyMod do
  use Settings.LocalDefaults app: :my_app
  ...
end

from this point forward, instead of using `:__default` for the `:app` in
Settings functions, :my_app will be specified.

Several things are required to make this work.

1. persistence is needed to remember the defaults for a module.
2. some macro will be required to inject code in the caller, since the receiever
   (Settings) will not know who the caller is.
3. Since we don't want to force everyone to use macros in other uses, we must
   play an alias game, something like `alias Settings.Macros, as: Settings` so
   that clients can use the same API syntax against the macros without changing
   their code.

The following snippet solves the persistence problem.

```elixir
# To store local defaults, the following code will need to get wrapped up in a
# `__using__/1` macro (along with some `alias` voodoo):
iex(1)> defmodule Test do
...(1)>   Module.register_attribute(__MODULE__, :custom_attr, persist: true)
...(1)>   @custom_attr :test
...(1)> end

# Here is how the data can be accessed
iex(2)> Test.__info__(:attributes)[:custom_attr]
[:test]

# A module without the custom attr returns `nil`
iex(3)> Kernel.__info__(:attributes)[:custom_attr]
nil
```

'''
[SPC-Backend]
partof = 'REQ-purpose'
text = '''

These are the currently identified low-level operations:

- `SettingsBackend.get(key)` => value | {:error, :bad_key}
- `SettingsBackend.set(key, value)` => :ok
- `SettingsBackend.del(key)` => :ok
- `SettingsBackend.all()` => [{key, value}]

based on the Settings Api, this is the expected use of the backend calls:

- Settings.set(app, key, value, scope)
  - Backend.set({app, key, scope}, value)
- Settings.get(app, key)
  - Backend.get({app, key, node()})
- Settings.lookup(app, key, scope)
  - Backend.get({app, key, scope})
- Settings.delete(app, key)
  - Backend.all()
  - Enum.filter based on app and key, construct tuple
  - Backend.del(tuple)
- Settings.delete(app, key, scope)
  - Backend.del({app, key, scope})
- Settings.set_if_not_set(app, key, scope, value)
  - Backend.get({app, key, scope})
  - if it exists, return the value
  - else, Backend.set({app, key, scope}, value)
- `Settings.get_all()`
  - Backend.all
- `Settings.get_all(app)`
  - Backend.all
  - Enum.filter based on app


Looking at `delete/2`, and `get_all/1` we could improve efficiency, offloading
the Enum query to the backend, which is likely to be faster, but we explicitly
are optimizing development speed of the backend, which will likely be
implemented for each client.

'''

[SPC-Config]
partof = 'REQ-purpose'
text = '''
Options:

- Have the user set a config key in config.exs, e.g.:
  `config :settings, settings_backend: Db.Models.Setting`
- Have a run-time API call, e.g. during client app startup:
  `Settings.set_backend(Db.Models.Setting)`

The run-time option, while initially attractive, is less useful, because the
expected paradigm for elixir users is that they can configure 3rd party
applications using config.exs.  For the initial setup, we are ruling out using
a run-time API call to set the backend.

'''
